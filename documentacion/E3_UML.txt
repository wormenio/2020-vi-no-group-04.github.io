@startuml
package USUARIOS{

class Usuario {
 -RolUsuario rol
 -String nombre
 -String contrase√±a
 +notificarValidadorDeCompra()
}

enum RolUsuario{
ADMINISTRADOR, COMUN
}

interface ValidarContrasenia{
 +validar()
}

class ContraseniaDebil implements ValidarContrasenia{
 +validar()
}

class LongitudMinima implements ValidarContrasenia{
 +validar()
}

class UnDigitoUnaLetra implements ValidarContrasenia{
 +validar()
}

class CaracteresRepetidos implements ValidarContrasenia{
 +validar()
}

}

class Organizacion{
 -List<Entidad> entidades
 -List<compra> compras
 -List<CategoriaEntidad> categoriaEntidad
}

class CategoriaEntidad {
 -Map<codigo, descripcion>
 +getCategoriasEntidad()
 +agregarCategoria()
 +eliminarCategoria()
 +aplicarReglaCategoria()
}

class ReglasParaEgresos {
 +reglasParaEgresos(Entidad)
}

class ReglasParaEntidadJuridica {
 +reglasParaEntidadJuridica(Entidad)
}

class ReglasParaEntidadBase {
 +reglasParaEntidadBase(Entidad)
}

interface Entidad{
   +getNombreFicticio()
 }
 class EntidadBase implements Entidad{
   -EntidadJuridica agrupacion
   -String descripcion
   +getNombreFicticio()
 }
 class EntidadJuridica implements Entidad{
   -String razonSocial
   -Int cuit
   -Direccion direccionPostal
   -Int codigoIGJ
   -CategoriaEntidadJuridica categoria
   -List<EntidadBase> conformadaPor
   +getNombreFicticio()
 }

interface CategoriaEntidadJuridica {
 +getTipoDeEmpresa()
}

enum CategorizacionAFIP {
MICRO
PEQUENIA
MEDIANA_TRAMO_1
MEDIANA_TRAMO_2
}

class Empresa implements CategoriaEntidadJuridica{
 -CategorizacionAFIP categorizacionAFIP
 +getTipoDeEmpresa()
}

class OSC implements CategoriaEntidadJuridica{
 +getTipoDeEmpresa()
}

class Moneda {
 -String simbolo
 -String nombre
 +getMonedas()
}

class Compra {
 -List<Items> items
 -Proveedor proveedor
 -Moneda moneda
 -DocumentoComercial documentoComercial
 -MedioDePago medioDePago
 -Date fecha
 -float importeTotal

 +getDocumentoComercialEgreso()
 +getFechaEgreso()
 +getMedioDePagoEgreso()
 +getTotalEgreso()
 +getDetalleEgreso()
 +etiquetarEgreso()
}

class CompraConPresupuesto extends Compra {
 -Criterio criterio
 -List<Presupuesto> presupuestos
 -Usuario revisor
 +validar()
 +esRevisor(Usuario usuario)
 +hacerRevisor(Usuario usuario)
 +notificarValidacion()
}

class Item {
 -float importe
 -String descripcion
}

enum Criterio{
MENOR_VALOR
}

class Presupuesto{
 -CompraConPresupuesto compra
 -List<Items> items
 -Proveedor proveedor
 -Moneda moneda
 +getTotal()
}

class Proveedor{
 -Direccion direccionPostal
 -String nombre
 -String documento
}



interface DocumentoComercial{
   +Int getNumeroReferencia()
  }

class Factura implements DocumentoComercial{
 +Int getNumeroReferencia()
  }

class NotaDebito implements DocumentoComercial{
 +Int getNumeroReferencia()
  }

class NotaCredito implements DocumentoComercial{
 +Int getNumeroReferencia()
  }

class Recibo implements DocumentoComercial{
 +Int getNumeroReferencia()
  }

class Cheque implements DocumentoComercial{
 +Int getNumeroReferencia()
  }

class Pagare implements DocumentoComercial{
 +Int getNumeroReferencia()
  }

class OrdenDeCompra implements DocumentoComercial{
 +Int getNumeroReferencia()
  }

class BoletaDepositoBancario implements DocumentoComercial{
 +Int getNumeroReferencia()
  }

class Remito implements DocumentoComercial{
 +Int getNumeroReferencia()
  }

interface MedioDePago{
 +getReferenciaDePago()
  }

  class TarjetaDeCredito implements MedioDePago {
    -Tarjeta tipoTarjeta
    -Int numeroTarjeta
    +getReferenciaDePago()
  }

  class TarjetaDebito implements MedioDePago{
    -Tarjeta tipoTarjeta 
    -Int numeroTarjeta
    +getReferenciaDePago()
}

class Efectivo implements MedioDePago{ 
  +getReferenciaDePago()
}

class Cajero implements MedioDePago{
  +getReferenciaDePago()
}

class DineroEnCuenta implements MedioDePago{
  +getReferenciaDePago()
}

interface ValidadorPost{
 +void notificarValidadorDeCompra()
}

class Pais{
    -String nombre
    -Moneda moneda
}
class APIMLibre {
 -ClientResponse response
}

class SeleccionadorPais{
 -List<Pais> paises
 +Pais seleccionar(String id)
}

class DireccionPostal{
 -String calle
 -int altura
 -String piso
 -String ciudad
 -String provincia
 -Pais pais
}

class EtiquetaEgreso {
 -Map<codigo,descripcion>
 +AgregarEtiqueta()
 +EliminarEtiqueta()
}

class ReporteEgreso {
 -Int anio
 -Int mes
 -EtiquetaEgreso etiquetaEgreso
 -Float monto
 +VerReporteEgreso()
}

Organizacion --> CategoriaEntidad
CategoriaEntidad ..> ReglasParaEgresos 
CategoriaEntidad ..> ReglasParaEntidadJuridica
CategoriaEntidad ..> ReglasParaEntidadBase
Organizacion "1"-->"*" ReporteEgreso
ReporteEgreso ..> EtiquetaEgreso
Compra --> EtiquetaEgreso
ReporteEgreso "1"-->"*" Compra
Presupuesto --> Proveedor
Compra "1"-->"*" Item
Presupuesto "1"-->"*" Item
DireccionPostal-->SeleccionadorPais
SeleccionadorPais -->APIMLibre
SeleccionadorPais "1" --> "*" Pais
DireccionPostal --> Pais
Moneda --> APIMLibre
Compra --> Moneda
Presupuesto --> Moneda
EntidadJuridica ->"1" CategoriaEntidadJuridica
Usuario ..> ValidarContrasenia
Criterio <-- CompraConPresupuesto
ValidadorPost <-- CompraConPresupuesto
ValidadorPost <|.. Usuario
Compra --> MedioDePago
Usuario -->"1" RolUsuario
CompraConPresupuesto --> Usuario
EntidadJuridica --> DireccionPostal
EntidadBase <-- EntidadJuridica 
Entidad "*"<--"1" Organizacion
Compra --> DocumentoComercial
Organizacion "1"<-->"*" Compra
Compra --> Proveedor
Proveedor --> DireccionPostal
CompraConPresupuesto <--> Presupuesto
Empresa --> CategorizacionAFIP
@enduml